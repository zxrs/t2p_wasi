/* automatically generated by rust-bindgen 0.66.1 */

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type va_list = __builtin_va_list;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFHeaderCommon {
    pub tiff_magic: u16,
    pub tiff_version: u16,
}
#[test]
fn bindgen_test_layout_TIFFHeaderCommon() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFHeaderCommon> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFHeaderCommon>(),
        4usize,
        concat!("Size of: ", stringify!(TIFFHeaderCommon))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFHeaderCommon>(),
        2usize,
        concat!("Alignment of ", stringify!(TIFFHeaderCommon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderCommon),
            "::",
            stringify!(tiff_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderCommon),
            "::",
            stringify!(tiff_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFHeaderClassic {
    pub tiff_magic: u16,
    pub tiff_version: u16,
    pub tiff_diroff: u32,
}
#[test]
fn bindgen_test_layout_TIFFHeaderClassic() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFHeaderClassic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFHeaderClassic>(),
        8usize,
        concat!("Size of: ", stringify!(TIFFHeaderClassic))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFHeaderClassic>(),
        4usize,
        concat!("Alignment of ", stringify!(TIFFHeaderClassic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderClassic),
            "::",
            stringify!(tiff_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderClassic),
            "::",
            stringify!(tiff_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_diroff) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderClassic),
            "::",
            stringify!(tiff_diroff)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFHeaderBig {
    pub tiff_magic: u16,
    pub tiff_version: u16,
    pub tiff_offsetsize: u16,
    pub tiff_unused: u16,
    pub tiff_diroff: u64,
}
#[test]
fn bindgen_test_layout_TIFFHeaderBig() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFHeaderBig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFHeaderBig>(),
        16usize,
        concat!("Size of: ", stringify!(TIFFHeaderBig))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFHeaderBig>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFHeaderBig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_offsetsize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_offsetsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_unused) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_diroff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFHeaderBig),
            "::",
            stringify!(tiff_diroff)
        )
    );
}
pub const TIFFDataType_TIFF_NOTYPE: TIFFDataType = 0;
pub const TIFFDataType_TIFF_BYTE: TIFFDataType = 1;
pub const TIFFDataType_TIFF_ASCII: TIFFDataType = 2;
pub const TIFFDataType_TIFF_SHORT: TIFFDataType = 3;
pub const TIFFDataType_TIFF_LONG: TIFFDataType = 4;
pub const TIFFDataType_TIFF_RATIONAL: TIFFDataType = 5;
pub const TIFFDataType_TIFF_SBYTE: TIFFDataType = 6;
pub const TIFFDataType_TIFF_UNDEFINED: TIFFDataType = 7;
pub const TIFFDataType_TIFF_SSHORT: TIFFDataType = 8;
pub const TIFFDataType_TIFF_SLONG: TIFFDataType = 9;
pub const TIFFDataType_TIFF_SRATIONAL: TIFFDataType = 10;
pub const TIFFDataType_TIFF_FLOAT: TIFFDataType = 11;
pub const TIFFDataType_TIFF_DOUBLE: TIFFDataType = 12;
pub const TIFFDataType_TIFF_IFD: TIFFDataType = 13;
pub const TIFFDataType_TIFF_LONG8: TIFFDataType = 16;
pub const TIFFDataType_TIFF_SLONG8: TIFFDataType = 17;
pub const TIFFDataType_TIFF_IFD8: TIFFDataType = 18;
pub type TIFFDataType = ::std::os::raw::c_uint;
pub type TIFF = tiff;
pub type tmsize_t = i64;
pub type toff_t = u64;
pub type tdir_t = u32;
pub type tstrile_t = u32;
pub type ttile_t = tstrile_t;
pub type tsize_t = tmsize_t;
pub type tdata_t = *mut ::std::os::raw::c_void;
pub type thandle_t = *mut ::std::os::raw::c_void;
pub type TIFFErrorHandlerExtR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFF,
        user_data: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFReadWriteProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thandle_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: tmsize_t,
    ) -> tmsize_t,
>;
pub type TIFFSeekProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: thandle_t, arg2: toff_t, arg3: ::std::os::raw::c_int) -> toff_t,
>;
pub type TIFFCloseProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: thandle_t) -> ::std::os::raw::c_int>;
pub type TIFFSizeProc = ::std::option::Option<unsafe extern "C" fn(arg1: thandle_t) -> toff_t>;
pub type TIFFMapFileProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: thandle_t,
        base: *mut *mut ::std::os::raw::c_void,
        size: *mut toff_t,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFUnmapFileProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: thandle_t, base: *mut ::std::os::raw::c_void, size: toff_t),
>;
pub type TIFFField = _TIFFField;
pub type TIFFFieldArray = _TIFFFieldArray;
pub type TIFFVSetMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFF,
        arg2: u32,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFVGetMethod = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut TIFF,
        arg2: u32,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFPrintMethod = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut TIFF, arg2: *mut FILE, arg3: ::std::os::raw::c_long),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFTagMethods {
    pub vsetfield: TIFFVSetMethod,
    pub vgetfield: TIFFVGetMethod,
    pub printdir: TIFFPrintMethod,
}
#[test]
fn bindgen_test_layout_TIFFTagMethods() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFTagMethods> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFTagMethods>(),
        24usize,
        concat!("Size of: ", stringify!(TIFFTagMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFTagMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFTagMethods))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vsetfield) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagMethods),
            "::",
            stringify!(vsetfield)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vgetfield) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagMethods),
            "::",
            stringify!(vgetfield)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).printdir) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagMethods),
            "::",
            stringify!(printdir)
        )
    );
}
extern "C" {
    pub fn TIFFClose(tif: *mut TIFF);
}
extern "C" {
    pub fn TIFFClientOpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: thandle_t,
        arg4: TIFFReadWriteProc,
        arg5: TIFFReadWriteProc,
        arg6: TIFFSeekProc,
        arg7: TIFFCloseProc,
        arg8: TIFFSizeProc,
        arg9: TIFFMapFileProc,
        arg10: TIFFUnmapFileProc,
    ) -> *mut TIFF;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIFFHashSet {
    _unused: [u8; 0],
}
#[doc = " Opaque type for a hash set"]
pub type TIFFHashSet = _TIFFHashSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIFFTagValue {
    pub info: *const TIFFField,
    pub count: ::std::os::raw::c_int,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TIFFTagValue() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFTagValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFTagValue>(),
        24usize,
        concat!("Size of: ", stringify!(TIFFTagValue))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFTagValue>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFTagValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagValue),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagValue),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFTagValue),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TIFFDirEntry {
    pub tdir_tag: u16,
    pub tdir_type: u16,
    pub tdir_count: u64,
    pub tdir_offset: TIFFDirEntry__bindgen_ty_1,
    pub tdir_ignore: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TIFFDirEntry__bindgen_ty_1 {
    pub toff_short: u16,
    pub toff_long: u32,
    pub toff_long8: u64,
}
#[test]
fn bindgen_test_layout_TIFFDirEntry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFDirEntry__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFDirEntry__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(TIFFDirEntry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFDirEntry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFDirEntry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toff_short) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry__bindgen_ty_1),
            "::",
            stringify!(toff_short)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toff_long) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry__bindgen_ty_1),
            "::",
            stringify!(toff_long)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).toff_long8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry__bindgen_ty_1),
            "::",
            stringify!(toff_long8)
        )
    );
}
#[test]
fn bindgen_test_layout_TIFFDirEntry() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFDirEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFDirEntry>(),
        32usize,
        concat!("Size of: ", stringify!(TIFFDirEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFDirEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFDirEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tdir_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry),
            "::",
            stringify!(tdir_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tdir_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry),
            "::",
            stringify!(tdir_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tdir_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry),
            "::",
            stringify!(tdir_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tdir_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry),
            "::",
            stringify!(tdir_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tdir_ignore) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirEntry),
            "::",
            stringify!(tdir_ignore)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TIFFDirectory {
    pub td_fieldsset: [u32; 4usize],
    pub td_imagewidth: u32,
    pub td_imagelength: u32,
    pub td_imagedepth: u32,
    pub td_tilewidth: u32,
    pub td_tilelength: u32,
    pub td_tiledepth: u32,
    pub td_subfiletype: u32,
    pub td_bitspersample: u16,
    pub td_sampleformat: u16,
    pub td_compression: u16,
    pub td_photometric: u16,
    pub td_threshholding: u16,
    pub td_fillorder: u16,
    pub td_orientation: u16,
    pub td_samplesperpixel: u16,
    pub td_rowsperstrip: u32,
    pub td_minsamplevalue: u16,
    pub td_maxsamplevalue: u16,
    pub td_sminsamplevalue: *mut f64,
    pub td_smaxsamplevalue: *mut f64,
    pub td_xresolution: f32,
    pub td_yresolution: f32,
    pub td_resolutionunit: u16,
    pub td_planarconfig: u16,
    pub td_xposition: f32,
    pub td_yposition: f32,
    pub td_pagenumber: [u16; 2usize],
    pub td_colormap: [*mut u16; 3usize],
    pub td_halftonehints: [u16; 2usize],
    pub td_extrasamples: u16,
    pub td_sampleinfo: *mut u16,
    pub td_stripsperimage: u32,
    pub td_nstrips: u32,
    pub td_stripoffset_p: *mut u64,
    pub td_stripbytecount_p: *mut u64,
    pub td_stripoffsetbyteallocsize: u32,
    pub td_stripoffset_entry: TIFFDirEntry,
    pub td_stripbytecount_entry: TIFFDirEntry,
    pub td_nsubifd: u16,
    pub td_subifd: *mut u64,
    pub td_ycbcrsubsampling: [u16; 2usize],
    pub td_ycbcrpositioning: u16,
    pub td_transferfunction: [*mut u16; 3usize],
    pub td_refblackwhite: *mut f32,
    pub td_inknameslen: ::std::os::raw::c_int,
    pub td_inknames: *mut ::std::os::raw::c_char,
    pub td_numberofinks: u16,
    pub td_customValueCount: ::std::os::raw::c_int,
    pub td_customValues: *mut TIFFTagValue,
    pub td_deferstrilearraywriting: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_TIFFDirectory() {
    const UNINIT: ::std::mem::MaybeUninit<TIFFDirectory> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TIFFDirectory>(),
        344usize,
        concat!("Size of: ", stringify!(TIFFDirectory))
    );
    assert_eq!(
        ::std::mem::align_of::<TIFFDirectory>(),
        8usize,
        concat!("Alignment of ", stringify!(TIFFDirectory))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_fieldsset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_fieldsset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_imagewidth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_imagewidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_imagelength) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_imagelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_imagedepth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_imagedepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_tilewidth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_tilewidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_tilelength) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_tilelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_tiledepth) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_tiledepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_subfiletype) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_subfiletype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_bitspersample) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_bitspersample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_sampleformat) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_sampleformat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_compression) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_compression)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_photometric) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_photometric)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_threshholding) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_threshholding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_fillorder) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_fillorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_orientation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_samplesperpixel) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_samplesperpixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_rowsperstrip) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_rowsperstrip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_minsamplevalue) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_minsamplevalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_maxsamplevalue) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_maxsamplevalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_sminsamplevalue) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_sminsamplevalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_smaxsamplevalue) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_smaxsamplevalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_xresolution) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_xresolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_yresolution) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_yresolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_resolutionunit) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_resolutionunit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_planarconfig) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_planarconfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_xposition) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_xposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_yposition) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_yposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_pagenumber) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_pagenumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_colormap) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_colormap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_halftonehints) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_halftonehints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_extrasamples) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_extrasamples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_sampleinfo) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_sampleinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_stripsperimage) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_stripsperimage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_nstrips) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_nstrips)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_stripoffset_p) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_stripoffset_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_stripbytecount_p) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_stripbytecount_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_stripoffsetbyteallocsize) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_stripoffsetbyteallocsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_stripoffset_entry) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_stripoffset_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_stripbytecount_entry) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_stripbytecount_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_nsubifd) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_nsubifd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_subifd) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_subifd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_ycbcrsubsampling) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_ycbcrsubsampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_ycbcrpositioning) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_ycbcrpositioning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_transferfunction) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_transferfunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_refblackwhite) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_refblackwhite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_inknameslen) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_inknameslen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_inknames) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_inknames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_numberofinks) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_numberofinks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_customValueCount) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_customValueCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_customValues) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_customValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td_deferstrilearraywriting) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(TIFFDirectory),
            "::",
            stringify!(td_deferstrilearraywriting)
        )
    );
}
pub const TIFFSetGetFieldType_TIFF_SETGET_UNDEFINED: TIFFSetGetFieldType = 0;
pub const TIFFSetGetFieldType_TIFF_SETGET_ASCII: TIFFSetGetFieldType = 1;
pub const TIFFSetGetFieldType_TIFF_SETGET_UINT8: TIFFSetGetFieldType = 2;
pub const TIFFSetGetFieldType_TIFF_SETGET_SINT8: TIFFSetGetFieldType = 3;
pub const TIFFSetGetFieldType_TIFF_SETGET_UINT16: TIFFSetGetFieldType = 4;
pub const TIFFSetGetFieldType_TIFF_SETGET_SINT16: TIFFSetGetFieldType = 5;
pub const TIFFSetGetFieldType_TIFF_SETGET_UINT32: TIFFSetGetFieldType = 6;
pub const TIFFSetGetFieldType_TIFF_SETGET_SINT32: TIFFSetGetFieldType = 7;
pub const TIFFSetGetFieldType_TIFF_SETGET_UINT64: TIFFSetGetFieldType = 8;
pub const TIFFSetGetFieldType_TIFF_SETGET_SINT64: TIFFSetGetFieldType = 9;
pub const TIFFSetGetFieldType_TIFF_SETGET_FLOAT: TIFFSetGetFieldType = 10;
pub const TIFFSetGetFieldType_TIFF_SETGET_DOUBLE: TIFFSetGetFieldType = 11;
pub const TIFFSetGetFieldType_TIFF_SETGET_IFD8: TIFFSetGetFieldType = 12;
pub const TIFFSetGetFieldType_TIFF_SETGET_INT: TIFFSetGetFieldType = 13;
pub const TIFFSetGetFieldType_TIFF_SETGET_UINT16_PAIR: TIFFSetGetFieldType = 14;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_ASCII: TIFFSetGetFieldType = 15;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_UINT8: TIFFSetGetFieldType = 16;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_SINT8: TIFFSetGetFieldType = 17;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_UINT16: TIFFSetGetFieldType = 18;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_SINT16: TIFFSetGetFieldType = 19;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_UINT32: TIFFSetGetFieldType = 20;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_SINT32: TIFFSetGetFieldType = 21;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_UINT64: TIFFSetGetFieldType = 22;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_SINT64: TIFFSetGetFieldType = 23;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_FLOAT: TIFFSetGetFieldType = 24;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_DOUBLE: TIFFSetGetFieldType = 25;
pub const TIFFSetGetFieldType_TIFF_SETGET_C0_IFD8: TIFFSetGetFieldType = 26;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_ASCII: TIFFSetGetFieldType = 27;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_UINT8: TIFFSetGetFieldType = 28;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_SINT8: TIFFSetGetFieldType = 29;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_UINT16: TIFFSetGetFieldType = 30;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_SINT16: TIFFSetGetFieldType = 31;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_UINT32: TIFFSetGetFieldType = 32;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_SINT32: TIFFSetGetFieldType = 33;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_UINT64: TIFFSetGetFieldType = 34;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_SINT64: TIFFSetGetFieldType = 35;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_FLOAT: TIFFSetGetFieldType = 36;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_DOUBLE: TIFFSetGetFieldType = 37;
pub const TIFFSetGetFieldType_TIFF_SETGET_C16_IFD8: TIFFSetGetFieldType = 38;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_ASCII: TIFFSetGetFieldType = 39;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_UINT8: TIFFSetGetFieldType = 40;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_SINT8: TIFFSetGetFieldType = 41;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_UINT16: TIFFSetGetFieldType = 42;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_SINT16: TIFFSetGetFieldType = 43;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_UINT32: TIFFSetGetFieldType = 44;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_SINT32: TIFFSetGetFieldType = 45;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_UINT64: TIFFSetGetFieldType = 46;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_SINT64: TIFFSetGetFieldType = 47;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_FLOAT: TIFFSetGetFieldType = 48;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_DOUBLE: TIFFSetGetFieldType = 49;
pub const TIFFSetGetFieldType_TIFF_SETGET_C32_IFD8: TIFFSetGetFieldType = 50;
pub const TIFFSetGetFieldType_TIFF_SETGET_OTHER: TIFFSetGetFieldType = 51;
pub type TIFFSetGetFieldType = ::std::os::raw::c_uint;
pub const TIFFFieldArrayType_tfiatImage: TIFFFieldArrayType = 0;
pub const TIFFFieldArrayType_tfiatExif: TIFFFieldArrayType = 1;
pub const TIFFFieldArrayType_tfiatGps: TIFFFieldArrayType = 2;
pub const TIFFFieldArrayType_tfiatOther: TIFFFieldArrayType = 3;
pub type TIFFFieldArrayType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIFFFieldArray {
    pub type_: TIFFFieldArrayType,
    pub allocated_size: u32,
    pub count: u32,
    pub fields: *mut TIFFField,
}
#[test]
fn bindgen_test_layout__TIFFFieldArray() {
    const UNINIT: ::std::mem::MaybeUninit<_TIFFFieldArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_TIFFFieldArray>(),
        24usize,
        concat!("Size of: ", stringify!(_TIFFFieldArray))
    );
    assert_eq!(
        ::std::mem::align_of::<_TIFFFieldArray>(),
        8usize,
        concat!("Alignment of ", stringify!(_TIFFFieldArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFFieldArray),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFFieldArray),
            "::",
            stringify!(allocated_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFFieldArray),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFFieldArray),
            "::",
            stringify!(fields)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIFFField {
    pub field_tag: u32,
    pub field_readcount: ::std::os::raw::c_short,
    pub field_writecount: ::std::os::raw::c_short,
    pub field_type: TIFFDataType,
    pub field_anonymous: u32,
    pub set_field_type: TIFFSetGetFieldType,
    pub get_field_type: TIFFSetGetFieldType,
    pub field_bit: ::std::os::raw::c_ushort,
    pub field_oktochange: ::std::os::raw::c_uchar,
    pub field_passcount: ::std::os::raw::c_uchar,
    pub field_name: *mut ::std::os::raw::c_char,
    pub field_subfields: *mut TIFFFieldArray,
}
#[test]
fn bindgen_test_layout__TIFFField() {
    const UNINIT: ::std::mem::MaybeUninit<_TIFFField> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_TIFFField>(),
        48usize,
        concat!("Size of: ", stringify!(_TIFFField))
    );
    assert_eq!(
        ::std::mem::align_of::<_TIFFField>(),
        8usize,
        concat!("Alignment of ", stringify!(_TIFFField))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_readcount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_readcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_writecount) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_writecount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_anonymous) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_anonymous)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_field_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(set_field_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_field_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(get_field_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_bit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_oktochange) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_oktochange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_passcount) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_passcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_subfields) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TIFFField),
            "::",
            stringify!(field_subfields)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct client_info {
    pub next: *mut client_info,
    pub data: *mut ::std::os::raw::c_void,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_client_info() {
    const UNINIT: ::std::mem::MaybeUninit<client_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<client_info>(),
        24usize,
        concat!("Size of: ", stringify!(client_info))
    );
    assert_eq!(
        ::std::mem::align_of::<client_info>(),
        8usize,
        concat!("Alignment of ", stringify!(client_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(client_info),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(client_info),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(client_info),
            "::",
            stringify!(name)
        )
    );
}
pub type TIFFClientInfoLink = client_info;
pub type TIFFVoidMethod = ::std::option::Option<unsafe extern "C" fn(arg1: *mut TIFF)>;
pub type TIFFBoolMethod =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut TIFF) -> ::std::os::raw::c_int>;
pub type TIFFPreMethod = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut TIFF, arg2: u16) -> ::std::os::raw::c_int,
>;
pub type TIFFCodeMethod = ::std::option::Option<
    unsafe extern "C" fn(
        tif: *mut TIFF,
        buf: *mut u8,
        size: tmsize_t,
        sample: u16,
    ) -> ::std::os::raw::c_int,
>;
pub type TIFFSeekMethod = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut TIFF, arg2: u32) -> ::std::os::raw::c_int,
>;
pub type TIFFPostMethod =
    ::std::option::Option<unsafe extern "C" fn(tif: *mut TIFF, buf: *mut u8, size: tmsize_t)>;
pub type TIFFStripMethod =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut TIFF, arg2: u32) -> u32>;
pub type TIFFTileMethod =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut TIFF, arg2: *mut u32, arg3: *mut u32)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tiff {
    pub tif_name: *mut ::std::os::raw::c_char,
    pub tif_fd: ::std::os::raw::c_int,
    pub tif_mode: ::std::os::raw::c_int,
    pub tif_flags: u32,
    pub tif_diroff: u64,
    pub tif_nextdiroff: u64,
    pub tif_lastdiroff: u64,
    pub tif_map_dir_offset_to_number: *mut TIFFHashSet,
    pub tif_map_dir_number_to_offset: *mut TIFFHashSet,
    pub tif_setdirectory_force_absolute: ::std::os::raw::c_int,
    pub tif_dir: TIFFDirectory,
    pub tif_customdir: TIFFDirectory,
    pub tif_header: tiff__bindgen_ty_1,
    pub tif_header_size: u16,
    pub tif_row: u32,
    pub tif_curdir: tdir_t,
    pub tif_curstrip: u32,
    pub tif_curoff: u64,
    pub tif_lastvalidoff: u64,
    pub tif_dataoff: u64,
    pub tif_nsubifd: u16,
    pub tif_subifdoff: u64,
    pub tif_col: u32,
    pub tif_curtile: u32,
    pub tif_tilesize: tmsize_t,
    pub tif_decodestatus: ::std::os::raw::c_int,
    pub tif_fixuptags: TIFFBoolMethod,
    pub tif_setupdecode: TIFFBoolMethod,
    pub tif_predecode: TIFFPreMethod,
    pub tif_setupencode: TIFFBoolMethod,
    pub tif_encodestatus: ::std::os::raw::c_int,
    pub tif_preencode: TIFFPreMethod,
    pub tif_postencode: TIFFBoolMethod,
    pub tif_decoderow: TIFFCodeMethod,
    pub tif_encoderow: TIFFCodeMethod,
    pub tif_decodestrip: TIFFCodeMethod,
    pub tif_encodestrip: TIFFCodeMethod,
    pub tif_decodetile: TIFFCodeMethod,
    pub tif_encodetile: TIFFCodeMethod,
    pub tif_close: TIFFVoidMethod,
    pub tif_seek: TIFFSeekMethod,
    pub tif_cleanup: TIFFVoidMethod,
    pub tif_defstripsize: TIFFStripMethod,
    pub tif_deftilesize: TIFFTileMethod,
    pub tif_data: *mut u8,
    pub tif_scanlinesize: tmsize_t,
    pub tif_scanlineskew: tmsize_t,
    pub tif_rawdata: *mut u8,
    pub tif_rawdatasize: tmsize_t,
    pub tif_rawdataoff: tmsize_t,
    pub tif_rawdataloaded: tmsize_t,
    pub tif_rawcp: *mut u8,
    pub tif_rawcc: tmsize_t,
    pub tif_base: *mut u8,
    pub tif_size: tmsize_t,
    pub tif_mapproc: TIFFMapFileProc,
    pub tif_unmapproc: TIFFUnmapFileProc,
    pub tif_clientdata: thandle_t,
    pub tif_readproc: TIFFReadWriteProc,
    pub tif_writeproc: TIFFReadWriteProc,
    pub tif_seekproc: TIFFSeekProc,
    pub tif_closeproc: TIFFCloseProc,
    pub tif_sizeproc: TIFFSizeProc,
    pub tif_postdecode: TIFFPostMethod,
    pub tif_fields: *mut *mut TIFFField,
    pub tif_nfields: usize,
    pub tif_foundfield: *const TIFFField,
    pub tif_tagmethods: TIFFTagMethods,
    pub tif_clientinfo: *mut TIFFClientInfoLink,
    pub tif_fieldscompat: *mut TIFFFieldArray,
    pub tif_nfieldscompat: usize,
    pub tif_errorhandler: TIFFErrorHandlerExtR,
    pub tif_errorhandler_user_data: *mut ::std::os::raw::c_void,
    pub tif_warnhandler: TIFFErrorHandlerExtR,
    pub tif_warnhandler_user_data: *mut ::std::os::raw::c_void,
    pub tif_max_single_mem_alloc: tmsize_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tiff__bindgen_ty_1 {
    pub common: TIFFHeaderCommon,
    pub classic: TIFFHeaderClassic,
    pub big: TIFFHeaderBig,
}
#[test]
fn bindgen_test_layout_tiff__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<tiff__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tiff__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(tiff__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tiff__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(tiff__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff__bindgen_ty_1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff__bindgen_ty_1),
            "::",
            stringify!(classic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).big) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff__bindgen_ty_1),
            "::",
            stringify!(big)
        )
    );
}
#[test]
fn bindgen_test_layout_tiff() {
    const UNINIT: ::std::mem::MaybeUninit<tiff> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tiff>(),
        1272usize,
        concat!("Size of: ", stringify!(tiff))
    );
    assert_eq!(
        ::std::mem::align_of::<tiff>(),
        8usize,
        concat!("Alignment of ", stringify!(tiff))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_mode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_diroff) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_diroff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_nextdiroff) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_nextdiroff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_lastdiroff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_lastdiroff)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).tif_map_dir_offset_to_number) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_map_dir_offset_to_number)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).tif_map_dir_number_to_offset) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_map_dir_number_to_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).tif_setdirectory_force_absolute) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_setdirectory_force_absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_dir) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_customdir) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_customdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_header) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_header_size) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_header_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_row) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_curdir) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_curdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_curstrip) as usize - ptr as usize },
        788usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_curstrip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_curoff) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_curoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_lastvalidoff) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_lastvalidoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_dataoff) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_dataoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_nsubifd) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_nsubifd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_subifdoff) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_subifdoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_col) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_curtile) as usize - ptr as usize },
        836usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_curtile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_tilesize) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_tilesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_decodestatus) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_decodestatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_fixuptags) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_fixuptags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_setupdecode) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_setupdecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_predecode) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_predecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_setupencode) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_setupencode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_encodestatus) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_encodestatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_preencode) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_preencode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_postencode) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_postencode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_decoderow) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_decoderow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_encoderow) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_encoderow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_decodestrip) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_decodestrip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_encodestrip) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_encodestrip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_decodetile) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_decodetile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_encodetile) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_encodetile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_close) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_seek) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_cleanup) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_cleanup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_defstripsize) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_defstripsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_deftilesize) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_deftilesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_data) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_scanlinesize) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_scanlinesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_scanlineskew) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_scanlineskew)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_rawdata) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_rawdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_rawdatasize) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_rawdatasize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_rawdataoff) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_rawdataoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_rawdataloaded) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_rawdataloaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_rawcp) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_rawcp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_rawcc) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_rawcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_base) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_size) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_mapproc) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_mapproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_unmapproc) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_unmapproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_clientdata) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_clientdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_readproc) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_readproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_writeproc) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_writeproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_seekproc) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_seekproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_closeproc) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_closeproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_sizeproc) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_sizeproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_postdecode) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_postdecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_fields) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_nfields) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_nfields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_foundfield) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_foundfield)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_tagmethods) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_tagmethods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_clientinfo) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_clientinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_fieldscompat) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_fieldscompat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_nfieldscompat) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_nfieldscompat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_errorhandler) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_errorhandler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_errorhandler_user_data) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_errorhandler_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_warnhandler) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_warnhandler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_warnhandler_user_data) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_warnhandler_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tif_max_single_mem_alloc) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(tiff),
            "::",
            stringify!(tif_max_single_mem_alloc)
        )
    );
}
pub const t2p_cs_t_T2P_CS_BILEVEL: t2p_cs_t = 1;
pub const t2p_cs_t_T2P_CS_GRAY: t2p_cs_t = 2;
pub const t2p_cs_t_T2P_CS_RGB: t2p_cs_t = 4;
pub const t2p_cs_t_T2P_CS_CMYK: t2p_cs_t = 8;
pub const t2p_cs_t_T2P_CS_LAB: t2p_cs_t = 16;
pub const t2p_cs_t_T2P_CS_PALETTE: t2p_cs_t = 4096;
pub const t2p_cs_t_T2P_CS_CALGRAY: t2p_cs_t = 32;
pub const t2p_cs_t_T2P_CS_CALRGB: t2p_cs_t = 64;
pub const t2p_cs_t_T2P_CS_ICCBASED: t2p_cs_t = 128;
pub type t2p_cs_t = ::std::os::raw::c_uint;
pub const t2p_compress_t_T2P_COMPRESS_NONE: t2p_compress_t = 0;
pub const t2p_compress_t_T2P_COMPRESS_G4: t2p_compress_t = 1;
pub type t2p_compress_t = ::std::os::raw::c_uint;
pub const t2p_transcode_t_T2P_TRANSCODE_RAW: t2p_transcode_t = 1;
pub const t2p_transcode_t_T2P_TRANSCODE_ENCODE: t2p_transcode_t = 2;
pub type t2p_transcode_t = ::std::os::raw::c_uint;
pub const t2p_sample_t_T2P_SAMPLE_NOTHING: t2p_sample_t = 0;
pub const t2p_sample_t_T2P_SAMPLE_ABGR_TO_RGB: t2p_sample_t = 1;
pub const t2p_sample_t_T2P_SAMPLE_RGBA_TO_RGB: t2p_sample_t = 2;
pub const t2p_sample_t_T2P_SAMPLE_RGBAA_TO_RGB: t2p_sample_t = 4;
pub const t2p_sample_t_T2P_SAMPLE_YCBCR_TO_RGB: t2p_sample_t = 8;
pub const t2p_sample_t_T2P_SAMPLE_YCBCR_TO_LAB: t2p_sample_t = 16;
pub const t2p_sample_t_T2P_SAMPLE_REALIZE_PALETTE: t2p_sample_t = 32;
pub const t2p_sample_t_T2P_SAMPLE_SIGNED_TO_UNSIGNED: t2p_sample_t = 64;
pub const t2p_sample_t_T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED: t2p_sample_t = 64;
pub const t2p_sample_t_T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG: t2p_sample_t = 256;
pub type t2p_sample_t = ::std::os::raw::c_uint;
pub const t2p_err_t_T2P_ERR_OK: t2p_err_t = 0;
pub const t2p_err_t_T2P_ERR_ERROR: t2p_err_t = 1;
pub type t2p_err_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T2P_PAGE {
    pub page_directory: tdir_t,
    pub page_number: u32,
    pub page_tilecount: ttile_t,
    pub page_extra: u32,
}
#[test]
fn bindgen_test_layout_T2P_PAGE() {
    const UNINIT: ::std::mem::MaybeUninit<T2P_PAGE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T2P_PAGE>(),
        16usize,
        concat!("Size of: ", stringify!(T2P_PAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<T2P_PAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(T2P_PAGE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_directory) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_PAGE),
            "::",
            stringify!(page_directory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_number) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_PAGE),
            "::",
            stringify!(page_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_tilecount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_PAGE),
            "::",
            stringify!(page_tilecount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_extra) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_PAGE),
            "::",
            stringify!(page_extra)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T2P_BOX {
    pub x1: f32,
    pub y1: f32,
    pub x2: f32,
    pub y2: f32,
    pub mat: [f32; 9usize],
}
#[test]
fn bindgen_test_layout_T2P_BOX() {
    const UNINIT: ::std::mem::MaybeUninit<T2P_BOX> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T2P_BOX>(),
        52usize,
        concat!("Size of: ", stringify!(T2P_BOX))
    );
    assert_eq!(
        ::std::mem::align_of::<T2P_BOX>(),
        4usize,
        concat!("Alignment of ", stringify!(T2P_BOX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_BOX),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_BOX),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_BOX),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_BOX),
            "::",
            stringify!(y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_BOX),
            "::",
            stringify!(mat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T2P_TILE {
    pub tile_box: T2P_BOX,
}
#[test]
fn bindgen_test_layout_T2P_TILE() {
    const UNINIT: ::std::mem::MaybeUninit<T2P_TILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T2P_TILE>(),
        52usize,
        concat!("Size of: ", stringify!(T2P_TILE))
    );
    assert_eq!(
        ::std::mem::align_of::<T2P_TILE>(),
        4usize,
        concat!("Alignment of ", stringify!(T2P_TILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tile_box) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILE),
            "::",
            stringify!(tile_box)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T2P_TILES {
    pub tiles_tilecount: ttile_t,
    pub tiles_tilewidth: u32,
    pub tiles_tilelength: u32,
    pub tiles_tilecountx: u32,
    pub tiles_tilecounty: u32,
    pub tiles_edgetilewidth: u32,
    pub tiles_edgetilelength: u32,
    pub tiles_tiles: *mut T2P_TILE,
}
#[test]
fn bindgen_test_layout_T2P_TILES() {
    const UNINIT: ::std::mem::MaybeUninit<T2P_TILES> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T2P_TILES>(),
        40usize,
        concat!("Size of: ", stringify!(T2P_TILES))
    );
    assert_eq!(
        ::std::mem::align_of::<T2P_TILES>(),
        8usize,
        concat!("Alignment of ", stringify!(T2P_TILES))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_tilecount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_tilecount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_tilewidth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_tilewidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_tilelength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_tilelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_tilecountx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_tilecountx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_tilecounty) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_tilecounty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_edgetilewidth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_edgetilewidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_edgetilelength) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_edgetilelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiles_tiles) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P_TILES),
            "::",
            stringify!(tiles_tiles)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T2P {
    pub t2p_error: t2p_err_t,
    pub tiff_pages: *mut T2P_PAGE,
    pub tiff_tiles: *mut T2P_TILES,
    pub tiff_pagecount: tdir_t,
    pub tiff_compression: u16,
    pub tiff_photometric: u16,
    pub tiff_fillorder: u16,
    pub tiff_bitspersample: u16,
    pub tiff_samplesperpixel: u16,
    pub tiff_planar: u16,
    pub tiff_width: u32,
    pub tiff_length: u32,
    pub tiff_xres: f32,
    pub tiff_yres: f32,
    pub tiff_orientation: u16,
    pub tiff_dataoffset: toff_t,
    pub tiff_datasize: tsize_t,
    pub tiff_maxdatasize: tsize_t,
    pub tiff_resunit: u16,
    pub pdf_centimeters: u16,
    pub pdf_overrideres: u16,
    pub pdf_overridepagesize: u16,
    pub pdf_defaultxres: f32,
    pub pdf_defaultyres: f32,
    pub pdf_xres: f32,
    pub pdf_yres: f32,
    pub pdf_defaultpagewidth: f32,
    pub pdf_defaultpagelength: f32,
    pub pdf_pagewidth: f32,
    pub pdf_pagelength: f32,
    pub pdf_imagewidth: f32,
    pub pdf_imagelength: f32,
    pub pdf_image_fillpage: ::std::os::raw::c_int,
    pub pdf_mediabox: T2P_BOX,
    pub pdf_imagebox: T2P_BOX,
    pub pdf_majorversion: u16,
    pub pdf_minorversion: u16,
    pub pdf_catalog: u32,
    pub pdf_pages: u32,
    pub pdf_info: u32,
    pub pdf_palettecs: u32,
    pub pdf_fitwindow: u16,
    pub pdf_startxref: u32,
    pub pdf_fileid: [::std::os::raw::c_char; 33usize],
    pub pdf_datetime: [::std::os::raw::c_char; 17usize],
    pub pdf_creator: [::std::os::raw::c_char; 512usize],
    pub pdf_creator_set: ::std::os::raw::c_int,
    pub pdf_author: [::std::os::raw::c_char; 512usize],
    pub pdf_author_set: ::std::os::raw::c_int,
    pub pdf_title: [::std::os::raw::c_char; 512usize],
    pub pdf_title_set: ::std::os::raw::c_int,
    pub pdf_subject: [::std::os::raw::c_char; 512usize],
    pub pdf_subject_set: ::std::os::raw::c_int,
    pub pdf_keywords: [::std::os::raw::c_char; 512usize],
    pub pdf_keywords_set: ::std::os::raw::c_int,
    pub pdf_colorspace: t2p_cs_t,
    pub pdf_colorspace_invert: u16,
    pub pdf_switchdecode: u16,
    pub pdf_palettesize: u16,
    pub pdf_palette: *mut ::std::os::raw::c_uchar,
    pub pdf_labrange: [::std::os::raw::c_int; 4usize],
    pub pdf_defaultcompression: t2p_compress_t,
    pub pdf_defaultcompressionquality: u16,
    pub pdf_compression: t2p_compress_t,
    pub pdf_compressionquality: u16,
    pub pdf_nopassthrough: u16,
    pub pdf_transcode: t2p_transcode_t,
    pub pdf_sample: t2p_sample_t,
    pub pdf_xrefoffsets: *mut u32,
    pub pdf_xrefcount: u32,
    pub pdf_page: tdir_t,
    pub tiff_whitechromaticities: [f32; 2usize],
    pub tiff_primarychromaticities: [f32; 6usize],
    pub tiff_referenceblackwhite: [f32; 2usize],
    pub tiff_transferfunction: [*mut u16; 3usize],
    pub pdf_image_interpolate: ::std::os::raw::c_int,
    pub tiff_transferfunctioncount: u16,
    pub pdf_icccs: u32,
    pub tiff_iccprofilelength: u32,
    pub tiff_iccprofile: tdata_t,
    pub outputfile: *mut FILE,
    pub outputdisable: ::std::os::raw::c_int,
    pub outputwritten: tsize_t,
}
#[test]
fn bindgen_test_layout_T2P() {
    const UNINIT: ::std::mem::MaybeUninit<T2P> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T2P>(),
        3096usize,
        concat!("Size of: ", stringify!(T2P))
    );
    assert_eq!(
        ::std::mem::align_of::<T2P>(),
        8usize,
        concat!("Alignment of ", stringify!(T2P))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t2p_error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(t2p_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_pages) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_tiles) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_tiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_pagecount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_pagecount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_compression) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_compression)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_photometric) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_photometric)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_fillorder) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_fillorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_bitspersample) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_bitspersample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_samplesperpixel) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_samplesperpixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_planar) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_planar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_length) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_xres) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_xres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_yres) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_yres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_orientation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_dataoffset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_dataoffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_datasize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_datasize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_maxdatasize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_maxdatasize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_resunit) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_resunit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_centimeters) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_centimeters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_overrideres) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_overrideres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_overridepagesize) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_overridepagesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_defaultxres) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_defaultxres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_defaultyres) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_defaultyres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_xres) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_xres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_yres) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_yres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_defaultpagewidth) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_defaultpagewidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_defaultpagelength) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_defaultpagelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_pagewidth) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_pagewidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_pagelength) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_pagelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_imagewidth) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_imagewidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_imagelength) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_imagelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_image_fillpage) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_image_fillpage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_mediabox) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_mediabox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_imagebox) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_imagebox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_majorversion) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_majorversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_minorversion) as usize - ptr as usize },
        246usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_minorversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_catalog) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_catalog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_pages) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_info) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_palettecs) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_palettecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_fitwindow) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_fitwindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_startxref) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_startxref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_fileid) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_fileid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_datetime) as usize - ptr as usize },
        305usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_datetime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_creator) as usize - ptr as usize },
        322usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_creator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_creator_set) as usize - ptr as usize },
        836usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_creator_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_author) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_author_set) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_author_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_title) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_title_set) as usize - ptr as usize },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_title_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_subject) as usize - ptr as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_subject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_subject_set) as usize - ptr as usize },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_subject_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_keywords) as usize - ptr as usize },
        2388usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_keywords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_keywords_set) as usize - ptr as usize },
        2900usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_keywords_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_colorspace) as usize - ptr as usize },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_colorspace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_colorspace_invert) as usize - ptr as usize },
        2908usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_colorspace_invert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_switchdecode) as usize - ptr as usize },
        2910usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_switchdecode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_palettesize) as usize - ptr as usize },
        2912usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_palettesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_palette) as usize - ptr as usize },
        2920usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_palette)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_labrange) as usize - ptr as usize },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_labrange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_defaultcompression) as usize - ptr as usize },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_defaultcompression)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pdf_defaultcompressionquality) as usize - ptr as usize
        },
        2948usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_defaultcompressionquality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_compression) as usize - ptr as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_compression)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_compressionquality) as usize - ptr as usize },
        2956usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_compressionquality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_nopassthrough) as usize - ptr as usize },
        2958usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_nopassthrough)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_transcode) as usize - ptr as usize },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_transcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_sample) as usize - ptr as usize },
        2964usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_xrefoffsets) as usize - ptr as usize },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_xrefoffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_xrefcount) as usize - ptr as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_xrefcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_page) as usize - ptr as usize },
        2980usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_whitechromaticities) as usize - ptr as usize },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_whitechromaticities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_primarychromaticities) as usize - ptr as usize },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_primarychromaticities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_referenceblackwhite) as usize - ptr as usize },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_referenceblackwhite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_transferfunction) as usize - ptr as usize },
        3024usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_transferfunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_image_interpolate) as usize - ptr as usize },
        3048usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_image_interpolate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_transferfunctioncount) as usize - ptr as usize },
        3052usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_transferfunctioncount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_icccs) as usize - ptr as usize },
        3056usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(pdf_icccs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_iccprofilelength) as usize - ptr as usize },
        3060usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_iccprofilelength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiff_iccprofile) as usize - ptr as usize },
        3064usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(tiff_iccprofile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputfile) as usize - ptr as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(outputfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputdisable) as usize - ptr as usize },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(outputdisable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputwritten) as usize - ptr as usize },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(T2P),
            "::",
            stringify!(outputwritten)
        )
    );
}
extern "C" {
    pub fn t2p_init() -> *mut T2P;
}
extern "C" {
    pub fn t2p_validate(arg1: *mut T2P);
}
extern "C" {
    pub fn t2p_write_pdf(arg1: *mut T2P, arg2: *mut TIFF, arg3: *mut TIFF) -> tsize_t;
}
extern "C" {
    pub fn t2p_free(arg1: *mut T2P);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
